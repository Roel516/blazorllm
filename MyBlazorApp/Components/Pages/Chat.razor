@page "/"
@page "/chat"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<h1>Chat with AI</h1>

<div class="chat-container">
    <div class="chat-messages">
        @foreach (var message in messages)
        {
            <div class="message @message.Role">
                <div class="message-header">@message.Role</div>
                <div class="message-content">@message.Content</div>
            </div>
        }
        @if (isLoading)
        {
            <div class="message assistant">
                <div class="message-header">assistant</div>
                <div class="message-content">
                    <em>Thinking...</em>
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text"
               @bind="currentMessage"
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               placeholder="Type your message here..."
               disabled="@isLoading"
               class="form-control" />
        <button @onclick="SendMessage"
                disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))"
                class="btn btn-primary">
            Send
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        height: calc(100vh - 200px);
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: #f5f5f5;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 8px;
        max-width: 80%;
    }

    .message.user {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }

    .message.assistant {
        background-color: white;
        color: #333;
        margin-right: auto;
        text-align: left;
    }

    .message-header {
        font-weight: bold;
        font-size: 0.85em;
        margin-bottom: 5px;
        opacity: 0.8;
    }

    .message-content {
        word-wrap: break-word;
    }

    .chat-input {
        display: flex;
        gap: 10px;
    }

    .chat-input input {
        flex: 1;
    }

    .chat-input button {
        min-width: 100px;
    }
</style>

@code {
    private string currentMessage = "";
    private bool isLoading = false;
    private string errorMessage = "";
    private List<ChatMessage> messages = new();

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        var userMessage = currentMessage.Trim();
        messages.Add(new ChatMessage { Role = "user", Content = userMessage });
        currentMessage = "";
        errorMessage = "";
        isLoading = true;

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");

            var response = await client.PostAsJsonAsync("/api/chat/send", new { message = userMessage });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (result != null)
                {
                    messages.Add(new ChatMessage { Role = "assistant", Content = result.Response });
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private class ChatMessage
    {
        public string Role { get; set; } = "";
        public string Content { get; set; } = "";
    }

    private class ChatResponse
    {
        public string Response { get; set; } = "";
    }
}