@page "/translate"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<PageTitle>Translate</PageTitle>

<h1>English ⇄ Chinese Translator</h1>

<div class="translate-container">
    <div class="translation-direction">
        <button class="btn @(translationDirection == "en-to-zh" ? "btn-primary" : "btn-outline-primary")"
                @onclick="@(() => SetDirection("en-to-zh"))">
            English → Chinese
        </button>
        <button class="btn @(translationDirection == "zh-to-en" ? "btn-primary" : "btn-outline-primary")"
                @onclick="@(() => SetDirection("zh-to-en"))">
            Chinese → English
        </button>
    </div>

    <div class="translation-boxes">
        <div class="input-box">
            <label>@(translationDirection == "en-to-zh" ? "English" : "Chinese") Text:</label>
            <textarea @bind="inputText"
                      @bind:event="oninput"
                      placeholder="@(translationDirection == "en-to-zh" ? "Enter English text..." : "输入中文...")"
                      disabled="@isLoading"
                      rows="10"
                      class="form-control"></textarea>
        </div>

        <div class="output-box">
            <label>@(translationDirection == "en-to-zh" ? "Chinese" : "English") Translation:</label>
            <textarea value="@outputText"
                      placeholder="Translation will appear here..."
                      readonly
                      rows="10"
                      class="form-control"></textarea>
            @if (!string.IsNullOrEmpty(pinyinText))
            {
                <div class="pinyin-box">
                    <label>Pinyin:</label>
                    <textarea value="@pinyinText"
                              readonly
                              rows="3"
                              class="form-control pinyin-text"></textarea>
                </div>
            }
        </div>
    </div>

    <div class="translate-actions">
        <button @onclick="TranslateText"
                disabled="@(isLoading || string.IsNullOrWhiteSpace(inputText))"
                class="btn btn-primary btn-lg">
            @if (isLoading)
            {
                <span>Translating...</span>
            }
            else
            {
                <span>Translate</span>
            }
        </button>
        <button @onclick="ClearText"
                disabled="@isLoading"
                class="btn btn-secondary">
            Clear
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

@code {
    private string inputText = "";
    private string outputText = "";
    private string pinyinText = "";
    private string translationDirection = "en-to-zh";
    private bool isLoading = false;
    private string errorMessage = "";

    private void SetDirection(string direction)
    {
        translationDirection = direction;
        inputText = "";
        outputText = "";
        pinyinText = "";
        errorMessage = "";
    }

    private async Task TranslateText()
    {
        if (string.IsNullOrWhiteSpace(inputText) || isLoading)
            return;

        errorMessage = "";
        isLoading = true;
        outputText = "";
        pinyinText = "";

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");

            var response = await client.PostAsJsonAsync("/api/translate/translate", new
            {
                text = inputText.Trim(),
                direction = translationDirection
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TranslateResponse>();
                if (result != null)
                {
                    outputText = result.Translation;
                    pinyinText = result.Pinyin ?? "";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearText()
    {
        inputText = "";
        outputText = "";
        pinyinText = "";
        errorMessage = "";
    }

    private class TranslateResponse
    {
        public string Translation { get; set; } = "";
        public string Pinyin { get; set; } = "";
    }
}