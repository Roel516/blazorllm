@page "/imagegen"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<PageTitle>Image Generation</PageTitle>

<h1>AI Image Generator</h1>

<div class="image-gen-container">
    <div class="input-section">
        <label for="prompt">Enter your image description:</label>
        <textarea id="prompt"
                  @bind="currentPrompt"
                  @bind:event="oninput"
                  placeholder="Describe the image you want to generate..."
                  disabled="@isLoading"
                  rows="4"
                  class="form-control"></textarea>

        <button @onclick="GenerateImage"
                disabled="@(isLoading || string.IsNullOrWhiteSpace(currentPrompt))"
                class="btn btn-primary mt-3">
            @if (isLoading)
            {
                <span>Generating...</span>
            }
            else
            {
                <span>Generate Image</span>
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div class="loading-section">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Generating your image... This may take a moment.</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(generatedImageData) && !isLoading)
    {
        <div class="image-section">
            <h3>Generated Image:</h3>
            <div class="image-container">
                <img src="@generatedImageData" alt="Generated image" class="generated-image" />
            </div>
            <p class="image-prompt"><strong>Prompt:</strong> @lastPrompt</p>
        </div>
    }

    @if (imageHistory.Count > 0)
    {
        <div class="history-section">
            <h3>Previous Generations:</h3>
            <div class="history-grid">
                @foreach (var item in imageHistory)
                {
                    <div class="history-item" @onclick="() => ShowHistoryImage(item)">
                        <img src="@item.ImageData" alt="@item.Prompt" />
                        <p class="history-prompt">@item.Prompt</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string currentPrompt = "";
    private bool isLoading = false;
    private string errorMessage = "";
    private string generatedImageData = "";
    private string lastPrompt = "";
    private List<GeneratedImage> imageHistory = new();

    private async Task GenerateImage()
    {
        if (string.IsNullOrWhiteSpace(currentPrompt) || isLoading)
            return;

        var prompt = currentPrompt.Trim();
        errorMessage = "";
        isLoading = true;

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            client.Timeout = TimeSpan.FromMinutes(2);

            var response = await client.PostAsJsonAsync("/api/image/generate", new { prompt = prompt });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageResponse>();
                if (result != null && !string.IsNullOrEmpty(result.ImageData))
                {
                    generatedImageData = result.ImageData;
                    lastPrompt = prompt;

                    // Add to history
                    imageHistory.Insert(0, new GeneratedImage
                    {
                        ImageData = result.ImageData,
                        Prompt = prompt
                    });

                    // Keep only last 6 images
                    if (imageHistory.Count > 6)
                    {
                        imageHistory.RemoveAt(imageHistory.Count - 1);
                    }

                    currentPrompt = "";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowHistoryImage(GeneratedImage image)
    {
        generatedImageData = image.ImageData;
        lastPrompt = image.Prompt;
    }

    private class GeneratedImage
    {
        public string ImageData { get; set; } = "";
        public string Prompt { get; set; } = "";
    }

    private class ImageResponse
    {
        public string ImageData { get; set; } = "";
    }
}